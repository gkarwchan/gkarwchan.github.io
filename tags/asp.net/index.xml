<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>asp.net on Ghassan&#39;s Page</title>
    <link>https://www.ghassan.page/tags/asp.net/</link>
    <description>Recent content in asp.net on Ghassan&#39;s Page</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 17 Oct 2023 12:41:54 -0600</lastBuildDate>
    <atom:link href="https://www.ghassan.page/tags/asp.net/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Write Asp.NET webhook handlers for Azure Event Grid events.</title>
      <link>https://www.ghassan.page/posts/2023_10_17_subscribe_to_upload_file_azure_blog_storage/</link>
      <pubDate>Tue, 17 Oct 2023 12:41:54 -0600</pubDate>
      <guid>https://www.ghassan.page/posts/2023_10_17_subscribe_to_upload_file_azure_blog_storage/</guid>
      <description>Azure Event Grid is a Pub Sub message distribution service that is fully integrated with Azure infrastructure. Almost all Azure services, and PaaS, and many third-party SaaS provides integration with Event Grid, by publishing events. It is supporting Http protocol for publishing events to it, and now with a newer upgrade it supports MQTT protocol for lighter fast IoT communications.&#xA;It is providing Pub/Sub services from Azure services to the subscribers, and adding to that reliability to insure the delivery of the messages.</description>
    </item>
    <item>
      <title>Best way to run background services in ASP.NET.</title>
      <link>https://www.ghassan.page/posts/2023_07_12_hosting_backgroundservice_aspnet/</link>
      <pubDate>Wed, 12 Jul 2023 12:41:54 -0600</pubDate>
      <guid>https://www.ghassan.page/posts/2023_07_12_hosting_backgroundservice_aspnet/</guid>
      <description>Asp.Net provides many ways to run background processes. They are:&#xA;IHostedService interface BackgroundService abstract class Worker Service using Microsoft.NET.SDK.Worker Actually they are just layers on top of each others, each layer provides extra functionality on the one below.&#xA;This post is going to describe each layer and what it provides.&#xA;Running background tasks using IHostedServiceAsp.NET provides support for running background tasks in the same process that host Asp.net application.&#xA;By implementing IHostedService interface, your background task will start a little bit after Asp.</description>
    </item>
    <item>
      <title>Build resilient applications accessing Azure services with no code.</title>
      <link>https://www.ghassan.page/posts/2023_03_11_build_resilient_applications_azure/</link>
      <pubDate>Sat, 11 Mar 2023 18:44:55 -0700</pubDate>
      <guid>https://www.ghassan.page/posts/2023_03_11_build_resilient_applications_azure/</guid>
      <description>When working on distributed system like systems that are running on the cloud, and microservices, then you should anticipate transient faults like temporary loss of network connection, or temporary unavailability of a service, or a service is busy.&#xA;This is why in cloud application, the term Building for resiliency become a pattern in building application, and it means properly handling these transient faults in the code.&#xA;There are two common used patterns that we can use in our code, that can help build resilience application.</description>
    </item>
    <item>
      <title>Everything you need to know about telemetry for your Asp.NET application on Azure.</title>
      <link>https://www.ghassan.page/posts/2023_02_24_application_insights_on_azure/</link>
      <pubDate>Fri, 24 Feb 2023 21:44:55 -0700</pubDate>
      <guid>https://www.ghassan.page/posts/2023_02_24_application_insights_on_azure/</guid>
      <description>All of the services that Azure offers for the instrumentation and observability (monitoring) of applications are grouped under Azure Monitor.&#xA;Three services fall under the banner of Azure Monitor:&#xA;Azure Monitor itself, which offers the observability component to track your apps. Application Insights, or its substitute OpenTelemetry, which offers the instrumentation and telemetry components The analytics component is provided by Log Analytics. We will emphasise the instrumentation component in this post.</description>
    </item>
    <item>
      <title>Implement a watchdog for your microservices using off-the-shelf ASP.Net Healthcheck UI.</title>
      <link>https://www.ghassan.page/posts/2023_02_02_aspnet_watchdog/</link>
      <pubDate>Thu, 02 Feb 2023 20:22:20 -0700</pubDate>
      <guid>https://www.ghassan.page/posts/2023_02_02_aspnet_watchdog/</guid>
      <description>What is a watchdogA watchdog is a service that monitor other services and take actions when it detect a service is failing.&#xA;ASP.NET starting from Core 5 has a built in UI module to monitor other services, and in few line of code you can build a watchdog for your services.&#xA;How to hook it up with your services:Your microservices should implement health check endpoints to be monitored by the orchestration service (Kubernetes, docker storm, &amp;hellip; etc).</description>
    </item>
    <item>
      <title>Calling HTTP API and Socket Exhaustion problem</title>
      <link>https://www.ghassan.page/posts/2023_01_08_http_and_socket_exhaustion/</link>
      <pubDate>Sun, 08 Jan 2023 12:41:54 -0600</pubDate>
      <guid>https://www.ghassan.page/posts/2023_01_08_http_and_socket_exhaustion/</guid>
      <description>You definitely had to write code to communicate to an API service. Regardless of the language you use, or the framework you use, there is a two major problems when you want to do lots of calls. They are:&#xA;Socket Exhaustion DNS Rotation I am going to use C# and ASP.NET as an example and show you what .NET world has a solution for that, but there are solutions in every language and framework.</description>
    </item>
    <item>
      <title>Take your development environment anywhere and on any machine with Dev Containers</title>
      <link>https://www.ghassan.page/posts/2022_12_29_devcontainer/</link>
      <pubDate>Thu, 29 Dec 2022 19:51:56 -0700</pubDate>
      <guid>https://www.ghassan.page/posts/2022_12_29_devcontainer/</guid>
      <description>Dev containers provides a fantastic way to onboard a new developer up and running in matter of just clone the git repository.&#xA;Dev containers allow you to create a docker container that will host all the development tools and libraries you use in your projects, and run it inside the container, and if you have an editor compatible then you can make the IDE connect to the containers and you can run or debug your code inside the containers.</description>
    </item>
    <item>
      <title>Prepare .NET core Microservice to be monitored by Kubernetes</title>
      <link>https://www.ghassan.page/posts/2022-12-28_prepare_aspnet_api_monitored_by_k8s/</link>
      <pubDate>Tue, 27 Dec 2022 19:47:05 -0700</pubDate>
      <guid>https://www.ghassan.page/posts/2022-12-28_prepare_aspnet_api_monitored_by_k8s/</guid>
      <description>Kubernetes Monitoring:Kubernetes monitors the deployed microservices and check if any failure or a deadlock that makes the service not responding in order to restart the hosting container.&#xA;Kubernetes achieve this by calling three different probes that determine the status of the container/pod. The three probes are:&#xA;liveness: which monitor any deadlock, or the service is down, and Kubernetes will remove the dead container and restart another one. startup: Your service might need time at startup to wait for all its dependencies to be ready.</description>
    </item>
    <item>
      <title>Some thoughts about ASP.NET Minimal API and Minimal Hosting Model</title>
      <link>https://www.ghassan.page/posts/2022_12_19_aspnet_minimal_api/</link>
      <pubDate>Mon, 19 Dec 2022 19:15:28 -0700</pubDate>
      <guid>https://www.ghassan.page/posts/2022_12_19_aspnet_minimal_api/</guid>
      <description>Why this post?ASP.NET 6&amp;rsquo;s minimal hosting model made me compare it to ASP.NET 2 and wonder if Microsoft is going back to some old concepts. I was curious about the potential benefit of migration, so I intend to explain and compare ASP.NET 6, 5 and 2.&#xA;The new WebApplication builder and some history of ASP.NET:Let us generate a new webapi application in .net 6 using webapi template:&#xA;1dotnet new webapi -n tutorial.</description>
    </item>
    <item>
      <title>Using Secret Manager for Configuration in .NET</title>
      <link>https://www.ghassan.page/posts/2022_11_28_use_secret_manager_in_dotnet/</link>
      <pubDate>Mon, 28 Nov 2022 19:41:04 -0700</pubDate>
      <guid>https://www.ghassan.page/posts/2022_11_28_use_secret_manager_in_dotnet/</guid>
      <description>It is critical not to store passwords or API keys in our code.&#xA;For all environments for the development process: (QA, UAT, Pre-Production, and Production), it is easier to place it in a safe place (Azure Key Vault for example), and access it during deployment.&#xA;For developer machines, we can use Secret Manager, or sometimes called User Secrets, which has a built-in support in ASP.NET.&#xA;Enable Secret Storage:In the project you want to add a secret run this command:</description>
    </item>
    <item>
      <title>Build emails with attachments using SMTP, MIME standard (AWS SES Case)</title>
      <link>https://www.ghassan.page/posts/2016_12_08_send_email_with_attachments_using_aws_ses/</link>
      <pubDate>Thu, 08 Dec 2016 12:41:54 -0600</pubDate>
      <guid>https://www.ghassan.page/posts/2016_12_08_send_email_with_attachments_using_aws_ses/</guid>
      <description>To send an email with AWS SES service, there are two options:&#xA;Connecting directly to the AWS SMTP server with SMTP protocols. Or call AWS API over HTTPS. The SMTP is easier, but then you have to open SMTP ports (587 or 25 usually).&#xA;Using AWS SES API:AWS SES API has two options to send emails as described in the documentation:&#xA;Send simple text only formatted email. Send email with attachments as raw formatted email.</description>
    </item>
  </channel>
</rss>
